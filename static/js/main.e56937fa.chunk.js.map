{"version":3,"sources":["components/navbar.js","components/header.js","components/main.js","components/footer.js","components/image.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","message","correct","topscore","Header","Main","children","Footer","Image","console","log","src","alt","name","onClick","pickImg","App","state","picked","shuffleArray","array","imgArray","Img","i","length","j","Math","floor","random","indexOf","setState","concat","this","map","image","process","url","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"46BAaeA,EAXA,SAACC,GAAD,OAEb,yBAAKC,UAAU,+BACb,0BAAMA,UAAU,wBAAhB,eACA,0BAAMA,UAAU,uBAAuBD,EAAME,SAC7C,0BAAMD,UAAU,0CAAhB,UACS,8BAAOD,EAAMG,SADtB,mBAEa,8BAAOH,EAAMI,aCAfC,EAPA,kBACb,yBAAKJ,UAAU,iBACb,wBAAIA,UAAU,eAAd,mBACA,wBAAIA,UAAU,eAAd,0FCEWK,EALF,SAACN,GAAD,OACP,yBAAKC,UAAU,yBACZD,EAAMO,WCQAC,EAVA,kBAEf,4BAAQP,UAAU,kBACd,yBAAKA,UAAU,aACb,0BAAMA,UAAU,aAAhB,sBCCSQ,EALD,SAACT,GAEX,OADAU,QAAQC,IAAIX,EAAMY,KACV,yBAAKA,IAAKZ,EAAMY,IAAKC,IAAKb,EAAMc,KAAMb,UAAU,iCAAiCc,QAAS,kBAAMf,EAAMgB,QAAQhB,EAAMc,U,OCiGjHG,G,iNAxFbC,MAAQ,CACNC,OAAQ,GACRhB,QAAS,EACTC,SAAU,EACVF,QAAS,2B,EAIbkB,aAAe,SAACC,GAEd,IADA,IAAIC,EAAWC,EACNC,EAAIF,EAASG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADI,EAEf,CAACF,EAASI,GAAIJ,EAASE,IAAnDF,EAASE,GAFkC,KAE9BF,EAASI,GAFqB,KAI9C,OAAOJ,G,EAGPN,QAAU,SAACF,GACTJ,QAAQC,IAAI,aACZ,IAAIQ,EAAS,EAAKD,MAAMC,QAEM,IAA1BA,EAAOW,QAAQhB,IACjB,EAAKiB,SAAS,CACZZ,OAAQA,EAAOa,OAAOlB,GACtBX,QAAS,EAAKe,MAAMf,QAAU,EAC9BC,SAAU,EAAKc,MAAMf,QAAU,EAAI,EAAKe,MAAMd,SAAW,EAAKc,MAAMf,QAAU,EAAI,EAAKe,MAAMd,SAC7FF,QAAS,0BAEX,EAAKkB,gBAGL,EAAKW,SAAS,CACZ7B,QAAS,sCACTC,QAAS,EACTgB,OAAQ,M,wEAoCJ,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQhB,QAAS8B,KAAKf,MAAMf,QAASC,SAAU6B,KAAKf,MAAMd,SAAUF,QAAS+B,KAAKf,MAAMhB,UACxF,kBAAC,EAAD,MACA,kBAAC,EAAD,KACG+B,KAAKb,aAAaG,GAAKW,IAAI,SAAAC,GAE3B,OADCzB,QAAQC,IAAIwB,GAEZ,kBAAC,EAAD,CAAOvB,IAAKwB,cAAyBD,EAAME,IAAKvB,KAAMqB,EAAMrB,KAAMwB,IAAKH,EAAMrB,KAAME,QAAS,EAAKA,aAGrG,kBAAC,EAAD,W,GAnFUuB,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e56937fa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = (props) => (\r\n\r\n  <nav className=\"navbar navbar-light bg-info\">\r\n    <span className=\"navbar-brand mb-0 h1\">Clicky Game</span>\r\n    <span className=\"text-center mb-0 h3\">{props.message}</span>\r\n    <span className=\"navbar-text text-dark font-weight-bold\">\r\n      Score: <span>{props.correct}</span>&nbsp;\r\n      Top Score: <span>{props.topscore}</span>\r\n    </span>\r\n  </nav>\r\n)\r\nexport default Navbar;","import React from \"react\";\r\n\r\nconst Header = () => (\r\n  <div className=\"jumbotron p-3\">\r\n    <h1 className=\"text-center\">Dog Memory Game</h1>\r\n    <h3 className=\"text-center\">Earn points with each click but click on any one more than once and the game resets!</h3>\r\n  </div>\r\n\r\n)\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Main = (props) =>\r\n      <div className=\"container text-center\">\r\n        {props.children}\r\n      </div>\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst Footer = () => (\r\n\r\n<footer className=\"footer bg-info\">\r\n    <div className=\"container\">\r\n      <span className=\"text-dark\">Patrick Follett\r\n      </span>\r\n  </div>\r\n</footer>\r\n\r\n)\r\nexport default Footer;","import React from 'react';\r\n\r\nconst Image = (props) => {\r\n    console.log(props.src)\r\n    return (<img src={props.src} alt={props.name} className=\"img-thumbnail clickable-images\" onClick={() => props.pickImg(props.name)} />)}\r\n\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\r\nimport Navbar from \"./components/navbar\";\r\nimport Header from \"./components/header\";\r\nimport Main from \"./components/main\";\r\nimport Footer from \"./components/footer\";\r\nimport Image from \"./components/image\";\r\nimport Img from \"./components/images.json\";\r\n\r\n\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    picked: [],\r\n    correct: 0,\r\n    topscore: 0,\r\n    message: 'Click an image to begin'\r\n  };\r\n\r\n//Shuffle Array\r\nshuffleArray = (array) => {\r\n  let imgArray = Img;\r\n  for (let i = imgArray.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [imgArray[i], imgArray[j]] = [imgArray[j], imgArray[i]];\r\n  }\r\n  return imgArray\r\n}\r\n\r\n  pickImg = (name) => {\r\n    console.log(\"Clicked!!\");\r\n    let picked = this.state.picked;\r\n    \r\n    if (picked.indexOf(name) === -1) {\r\n      this.setState({\r\n        picked: picked.concat(name),\r\n        correct: this.state.correct + 1,\r\n        topscore: this.state.correct + 1 > this.state.topscore ? this.state.correct + 1 : this.state.topscore,\r\n        message: \"Correct: Good choice!\" \r\n      })\r\n      this.shuffleArray();\r\n    }\r\n    else {\r\n      this.setState({\r\n        message: \"Already Selected Game Over, Replay?\",\r\n        correct: 0,\r\n        picked: []\r\n      })\r\n    }\r\n  }\r\n\r\n  // imgSwitch = (name) => {\r\n  //   switch (name) {\r\n  //     case \"dancingdog\":\r\n  //       return `${dancingdog}`\r\n  //     case \"doggpihy1\":\r\n  //       return `${doggiphy}`\r\n  //     case \"drivingdog\":\r\n  //       return `${drivingdog}`\r\n  //     case \"exercisedog\":\r\n  //       return `${exercisedog}`\r\n  //     case \"floatingdog\":\r\n  //       return `${floatingdog}`\r\n  //     case \"happydog\":\r\n  //       return `${happydog}`\r\n  //     case \"hiddendog\":\r\n  //       return `${hiddendog}`\r\n  //     case \"pizzadog\":\r\n  //       return `${pizzadog}`\r\n  //     case \"scooterdog\":\r\n  //       return `${scooterdog}`\r\n  //     case \"slidingdog\":\r\n  //       return `${slidingdog}`\r\n  //     case \"smilesdog\":\r\n  //       return `${smilesdog}`\r\n  //     case \"typingdog\":\r\n  //       return `${typingdog}`\r\n  //     default:\r\n  //       return `${typingdog}`\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar correct={this.state.correct} topscore={this.state.topscore} message={this.state.message}/>\r\n        <Header />\r\n        <Main>\r\n          {this.shuffleArray(Img).map(image => {\r\n            console.log(image)\r\n           return (\r\n            <Image src={process.env.PUBLIC_URL + image.url} name={image.name} key={image.name} pickImg={this.pickImg}  />\r\n          )})}\r\n        </Main>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}